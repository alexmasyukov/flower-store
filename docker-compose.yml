version: '3.7'

services:

  app:
    container_name: app
    networks:
      - front
    build:
      context: ./client
      dockerfile: Dockerfile.prod
#    ports:
#      - 3000:80
    restart: always

  api:
    container_name: api
    networks:
      - front
      - db
    build:
      context: ./server
      dockerfile: Dockerfile.prod
#    ports:
#      - 5000:3500
    restart: always

  postgres:
    image: postgres:12.2
    container_name: postgres
    environment:
      POSTGRES_USER: db
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: klumba
    #            PGDATA: OLD /data/postgres
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    expose:
      - 5432
    ports:
      - 7878:5432
    networks:
      - db
    restart: always

  certbot:
    image: certbot/certbot
    container_name: certbot
    networks:
      - front
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    restart: unless-stopped
    entrypoint:  "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    # Проверяет каждые 12 часов, нужны ли новые сертификаты

  nginx:
    image: nginx:1.17.9-alpine
    container_name: nginx
    networks:
      - front
      - db
    depends_on:
      - postgres
      - api
      - app
    volumes:
      - ./settings/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    # Перезапустит контейнер в непредвиденных ситуациях
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    # Перезапустит nginx контейнер каждые 6 часов и подгрузит новые сертификаты, если есть

networks:
  front:
    name: front
  db:
    name: db
    driver: bridge


#  docker-compose -f docker-compose.prod.yml up --build

#  File "/usr/local/lib/python3.7/site-packages/gunicorn/app/wsgiapp.py", line 41, in load_wsgiapp
#  pgadmin     |     return util.import_app(self.app_uri)