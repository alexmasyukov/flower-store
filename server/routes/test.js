const a = ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function: onevent] ],
    end: [Function: onevent]
  },
  _eventsCount: 2,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: false,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    socket: Socket {
    connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
      objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
    },
    readable: true,
      _events: [Object: null prototype] {
      end: [Array],
        timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Array],
        close: [Array],
        drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
      objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
      writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object]
    },
    writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: Server {
      insecureHTTPParser: undefined,
        _events: [Object: null prototype],
      _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        _connectionKey: '6::::3500',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
        [Symbol(asyncId)]: 9
    },
    _server: Server {
      insecureHTTPParser: undefined,
        _events: [Object: null prototype],
      _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        _connectionKey: '6::::3500',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
        [Symbol(asyncId)]: 9
    },
    timeout: 120000,
      parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [IncomingMessage],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 1594016114465
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
      _httpMessage: [Circular],
      _peername: { address: '::ffff:172.18.0.5', family: 'IPv6', port: 40734 },
    [Symbol(asyncId)]: 33,
      [Symbol(kHandle)]: TCP {
      reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 17966,
        _onTimeout: [Function: bound ],
      _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 34,
        [Symbol(triggerId)]: 33
    },
    [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
      objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
    },
    readable: true,
      _events: [Object: null prototype] {
      end: [Array],
        timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Array],
        close: [Array],
        drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
      objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
      writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object]
    },
    writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: Server {
      insecureHTTPParser: undefined,
        _events: [Object: null prototype],
      _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        _connectionKey: '6::::3500',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
        [Symbol(asyncId)]: 9
    },
    _server: Server {
      insecureHTTPParser: undefined,
        _events: [Object: null prototype],
      _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        _connectionKey: '6::::3500',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
        [Symbol(asyncId)]: 9
    },
    timeout: 120000,
      parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [IncomingMessage],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 1594016114465
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
      _httpMessage: [Circular],
      _peername: { address: '::ffff:172.18.0.5', family: 'IPv6', port: 40734 },
    [Symbol(asyncId)]: 33,
      [Symbol(kHandle)]: TCP {
      reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 17966,
        _onTimeout: [Function: bound ],
      _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 34,
        [Symbol(triggerId)]: 33
    },
    [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
  },
  _header: null,
    _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
    _expect_continue: false,
    req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: true,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
    },
    readable: false,
      _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
      _maxListeners: undefined,
      socket: Socket {
      connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object: null prototype],
      _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 33,
        [Symbol(kHandle)]: [TCP],
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 17966,
          _onTimeout: [Function: bound ],
        _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(asyncId)]: 34,
          [Symbol(triggerId)]: 33
      },
      [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object: null prototype],
      _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 33,
        [Symbol(kHandle)]: [TCP],
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 17966,
          _onTimeout: [Function: bound ],
        _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(asyncId)]: 34,
          [Symbol(triggerId)]: 33
      },
      [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
      httpVersionMinor: 0,
      httpVersion: '1.0',
      complete: true,
      headers: {
      host: 'localhost',
        'x-real-ip': '172.18.0.1',
        'x-forwarded-for': '172.18.0.1',
        'x-forwarded-proto': 'http',
        connection: 'close',
        'content-length': '44',
        'user-agent': 'insomnia/2020.2.2',
        cookie: 'connect.sid=s%3AGm5x2wFPO2L_CayBuxt9MiaEPJV914Jn.Rx0pf3aEYfTTev2Au2Z1s0MNCE7jxJrmVQH1ossPpAg',
        'content-type': 'application/json',
        accept: '*/*'
    },
    rawHeaders: [
      'Host',
      'localhost',
      'X-Real-IP',
      '172.18.0.1',
      'X-Forwarded-For',
      '172.18.0.1',
      'X-Forwarded-Proto',
      'http',
      'Connection',
      'close',
      'Content-Length',
      '44',
      'User-Agent',
      'insomnia/2020.2.2',
      'Cookie',
      'connect.sid=s%3AGm5x2wFPO2L_CayBuxt9MiaEPJV914Jn.Rx0pf3aEYfTTev2Au2Z1s0MNCE7jxJrmVQH1ossPpAg',
      'Content-Type',
      'application/json',
      'Accept',
      '*/*'
    ],
      trailers: {},
    rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '/login',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: Socket {
      connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object: null prototype],
      _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 33,
        [Symbol(kHandle)]: [TCP],
        [Symbol(kSetNoDelay)]: false,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 17966,
          _onTimeout: [Function: bound ],
        _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(asyncId)]: 34,
          [Symbol(triggerId)]: 33
      },
      [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
    },
    _consuming: true,
      _dumped: false,
      next: [Function: next],
    baseUrl: '/v1',
      originalUrl: '/v1/login',
      _parsedUrl: Url {
      protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/login',
        path: '/login',
        href: '/login',
        _raw: '/login'
    },
    params: {},
    query: {},
    res: [Circular],
      _startAt: [ 1543, 884390996 ],
      _startTime: 2020-07-06T06:15:14.469Z,
      _remoteAddress: '::ffff:172.18.0.5',
      body: { username: 'test', password: '1234' },
    _body: true,
      length: undefined,
      _parsedOriginalUrl: Url {
      protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/v1/login',
        path: '/v1/login',
        href: '/v1/login',
        _raw: '/v1/login'
    },
    sessionStore: KnexStore {
      _events: [Object: null prototype],
      _eventsCount: 2,
        _maxListeners: undefined,
        createtable: true,
        tablename: 'sessions',
        sidfieldname: 'sid',
        knex: [Function],
        ready: [Promise],
        generate: [Function],
        [Symbol(kCapture)]: false
    },
    sessionID: 'Gm5x2wFPO2L_CayBuxt9MiaEPJV914Jn',
      session: Session { cookie: [Object], passport: [Object], views: 4 },
    _passport: { instance: [Authenticator], session: [Object] },
    user: { id: 5544, username: 'test', password: '1234' },
    route: Route { path: '/login', stack: [Array], methods: [Object] },
    authInfo: {},
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  _startAt: undefined,
    _startTime: undefined,
    writeHead: [Function: writeHead],
  __onFinished: [Function: listener] { queue: [ [Function: logRequest] ] },
  flush: [Function: flush],
  write: [Function: write],
  end: [Function: end],
  on: [Function: on],
  [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ],
      'server-datetime': [ 'Server-datetime', '2020-07-06 06:15:14.000000 +00:00' ]
  }
}
